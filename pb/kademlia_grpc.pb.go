// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: kademlia.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FullNode_Ping_FullMethodName      = "/godemlia.FullNode/Ping"
	FullNode_Store_FullMethodName     = "/godemlia.FullNode/Store"
	FullNode_FindNode_FullMethodName  = "/godemlia.FullNode/FindNode"
	FullNode_FindValue_FullMethodName = "/godemlia.FullNode/FindValue"
)

// FullNodeClient is the client API for FullNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FullNodeClient interface {
	Ping(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	Store(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StoreData, Response], error)
	FindNode(ctx context.Context, in *Target, opts ...grpc.CallOption) (*KBucket, error)
	FindValue(ctx context.Context, in *Target, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FindValueResponse], error)
}

type fullNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewFullNodeClient(cc grpc.ClientConnInterface) FullNodeClient {
	return &fullNodeClient{cc}
}

func (c *fullNodeClient) Ping(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Node)
	err := c.cc.Invoke(ctx, FullNode_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fullNodeClient) Store(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StoreData, Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FullNode_ServiceDesc.Streams[0], FullNode_Store_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StoreData, Response]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FullNode_StoreClient = grpc.ClientStreamingClient[StoreData, Response]

func (c *fullNodeClient) FindNode(ctx context.Context, in *Target, opts ...grpc.CallOption) (*KBucket, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KBucket)
	err := c.cc.Invoke(ctx, FullNode_FindNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fullNodeClient) FindValue(ctx context.Context, in *Target, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FindValueResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FullNode_ServiceDesc.Streams[1], FullNode_FindValue_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Target, FindValueResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FullNode_FindValueClient = grpc.ServerStreamingClient[FindValueResponse]

// FullNodeServer is the server API for FullNode service.
// All implementations must embed UnimplementedFullNodeServer
// for forward compatibility.
type FullNodeServer interface {
	Ping(context.Context, *Node) (*Node, error)
	Store(grpc.ClientStreamingServer[StoreData, Response]) error
	FindNode(context.Context, *Target) (*KBucket, error)
	FindValue(*Target, grpc.ServerStreamingServer[FindValueResponse]) error
	mustEmbedUnimplementedFullNodeServer()
}

// UnimplementedFullNodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFullNodeServer struct{}

func (UnimplementedFullNodeServer) Ping(context.Context, *Node) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedFullNodeServer) Store(grpc.ClientStreamingServer[StoreData, Response]) error {
	return status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedFullNodeServer) FindNode(context.Context, *Target) (*KBucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNode not implemented")
}
func (UnimplementedFullNodeServer) FindValue(*Target, grpc.ServerStreamingServer[FindValueResponse]) error {
	return status.Errorf(codes.Unimplemented, "method FindValue not implemented")
}
func (UnimplementedFullNodeServer) mustEmbedUnimplementedFullNodeServer() {}
func (UnimplementedFullNodeServer) testEmbeddedByValue()                  {}

// UnsafeFullNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FullNodeServer will
// result in compilation errors.
type UnsafeFullNodeServer interface {
	mustEmbedUnimplementedFullNodeServer()
}

func RegisterFullNodeServer(s grpc.ServiceRegistrar, srv FullNodeServer) {
	// If the following call pancis, it indicates UnimplementedFullNodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FullNode_ServiceDesc, srv)
}

func _FullNode_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FullNodeServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FullNode_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FullNodeServer).Ping(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _FullNode_Store_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FullNodeServer).Store(&grpc.GenericServerStream[StoreData, Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FullNode_StoreServer = grpc.ClientStreamingServer[StoreData, Response]

func _FullNode_FindNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FullNodeServer).FindNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FullNode_FindNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FullNodeServer).FindNode(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _FullNode_FindValue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Target)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FullNodeServer).FindValue(m, &grpc.GenericServerStream[Target, FindValueResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FullNode_FindValueServer = grpc.ServerStreamingServer[FindValueResponse]

// FullNode_ServiceDesc is the grpc.ServiceDesc for FullNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FullNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "godemlia.FullNode",
	HandlerType: (*FullNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _FullNode_Ping_Handler,
		},
		{
			MethodName: "FindNode",
			Handler:    _FullNode_FindNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Store",
			Handler:       _FullNode_Store_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FindValue",
			Handler:       _FullNode_FindValue_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kademlia.proto",
}
